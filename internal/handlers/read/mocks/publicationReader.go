// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	model "KillReall666/schooldocumentmanagment.git/internal/model"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// publicationReader is an autogenerated mock type for the publicationReader type
type publicationReader struct {
	mock.Mock
}

// ReadPublicationByUUID provides a mock function with given fields: ctx, UUID
func (_m *publicationReader) ReadPublicationByUUID(ctx context.Context, UUID string) (*model.Publication, error) {
	ret := _m.Called(ctx, UUID)

	if len(ret) == 0 {
		panic("no return value specified for ReadPublicationByUUID")
	}

	var r0 *model.Publication
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Publication, error)); ok {
		return rf(ctx, UUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Publication); ok {
		r0 = rf(ctx, UUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Publication)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, UUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newPublicationReader creates a new instance of publicationReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newPublicationReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *publicationReader {
	mock := &publicationReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
